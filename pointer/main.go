package main

// 指针只占用4个或8个字节的内存大小
// * 加类型名称 表示对应的指针类型
// 通过var关键字直接定义的指针变量是不能进行赋值操作的
// 它的值为 nil，也就是还没有指向的内存地址
//
//	map、slice、channel 引用类型
func main() {
	var i *int // var i *int = new(int)
	// *i = 10
	// error: invalid memory address or nil pointer dereference
	i = new(int)
	*i = 10
}

// 指针的两大好处：

//    可以修改指向数据的值；
//    在变量赋值，参数传值的时候可以节省内存

// 不要对 map、slice、channel 这类引用类型使用指针；
// 如果需要修改方法接收者内部的数据或者状态时，需要使用指针；
// 如果需要修改参数的值或者内部数据时，也需要使用指针类型的参数；
// 如果是比较大的结构体，每次参数传递或者调用方法都要内存拷贝，内存占用多，这时候可以考虑使用指针；
// 像 int、bool 这样的小数据类型没必要使用指针；
// 如果需要并发安全，则尽可能地不要使用指针，使用指针一定要保证并发安全；
// 指针最好不要嵌套，也就是不要使用一个指向指针的指针，虽然 Go 语言允许这么做，但是这会使你的代码变得异常复杂。
